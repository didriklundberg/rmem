open import Pervasives
open import Sail_impl_base
open import InstructionSemantics
open import Events
open import Fragments
open import Isa
open import Utils


(** model parameters *)
(*: \subsection{Model Parameters} :*)

type new_coherence_params =
  | Use_new_coherence
  | Use_old_coherence
  | Check_new_vs_old

type storage_model =
  | PLDI11_storage_model
  | Flowing_storage_model
  | Flat_storage_model
  | POP_storage_model
  | TSO_storage_model
  | Promising_storage_model

type flowing_topology =
  | FTopo_leaf of thread_id
  | FTopo_join of list flowing_topology


type icache_type =
  | Icache_Flat  (* a single write per address per icache *)
  | Icache_Many  (* many writes per address per icache *)

type fetch_params =
  <| flat_need_ic : bool;
     flat_need_dc : bool;
     flat_icache_type : icache_type;
  |>

type fetch_type =  (* Enable/Disable fetching for self-modifying examples *)
  | Fetch_Atomic
  | Fetch_Relaxed of fetch_params

type ss_params =
  <| ss_model: storage_model;
     ss_sc   : bool; (* behave like SC *)
     new_coh : new_coherence_params;
     ss_fetch_type: fetch_type;

     (* parameters for Flowing *)
     flowing_topology : flowing_topology;
  |>

let is_relaxed_icaches params = match params.ss_fetch_type with
  | Fetch_Atomic -> true
  | Fetch_Relaxed p ->
      match p.flat_icache_type with
      | Icache_Flat -> false
      | Icache_Many -> true
      end
  end
let update_ss_params_flat_idc params b =
  match params.ss_fetch_type with
  | Fetch_Atomic -> params
  | Fetch_Relaxed p -> <| params with ss_fetch_type = Fetch_Relaxed <| p with flat_need_dc = not b |> |>
  end

let update_ss_params_flat_dic params b =
  match params.ss_fetch_type with
  | Fetch_Atomic -> params
  | Fetch_Relaxed p -> <| params with ss_fetch_type = Fetch_Relaxed <| p with flat_need_ic = not b |> |>
  end

type pop_thread_model =
  | Standard_POP
  | Flat_POP

type thread_model =
  | PLDI11_thread_model
  | POP_thread_model of pop_thread_model
  | TSO_thread_model
  | Promising_thread_model
  | Relaxed_thread_model  (* A bit of a hack! This is a very relaxed model
                          intended to be used with 'rmem -dot_final_ok true ...'.
                          It should allow all litmus tests that don't
                          have a "data | addr | rf | fr" cycle.
                          To be used together with flat-storage. *)

type thread_restriction =
  | RestrictionNone
  | RestrictionSC      (* sequential consistency *)
  | RestrictionSCANASC (* single-copy-atomic non-atomic-sequential-consistency *)


type branch_targets_map = map thread_id (map address (set address))

type fetch_order =
    | Fetch_Unrestricted (* DIC=0 *)
    | Fetch_Sequential   (* DIC=1 *)

type thread_params =
  <| thread_model:       thread_model;
     thread_restriction: thread_restriction; (* additional model restrictions *)
     thread_allow_tree_speculation:  bool;
     thread_allow_write_subsumption: bool;
     thread_fail_on_loop:            bool;
     thread_loop_unroll_limit:       maybe nat;
     thread_fetch_limit:             maybe nat;
     thread_fetch_from_ss:           bool;
     thread_fetch_order: fetch_order;

     branch_targets: branch_targets_map;
     thread_modified_code_footprints: set footprint;

     p_par_pts_search : bool;
     p_par_pts_search_follow_trace : bool;
     p_fuel : maybe nat;
     p_promise_first: bool;
  |>

type model_params =
  <| ss:             ss_params;
     t:              thread_params;

     (* shared_memory: this is an over approximation of the shared memory
     locations. Used by Promising. *)
     shared_memory:  maybe (set footprint)
  |>

let in_shared_memory params fp =
  match params.shared_memory with
  | Just sm -> exists (fp' IN sm). sub_footprint fp fp'
  | Nothing -> true
  end


(* this property holds if the model params are valid wrt dc/ic values
 * i.e. this property holds if the params describe something equivalent to or stronger
 *  than some DC/IC configuration
 * but fails if the parameters would give invalid results.
 *)
let prop_flat_valid_dcic params =
  match params.ss.ss_fetch_type with
  | Fetch_Atomic -> true
  | Fetch_Relaxed p ->
      (match p.flat_need_ic with
      | false ->
          (* if DIC=1 then must fetch in order *)
          match params.t.thread_fetch_order with
          | Fetch_Unrestricted -> false
          | Fetch_Sequential -> true
          end
      | true -> true
      end) &&
      (match p.flat_need_dc with
      | false -> true
      | true  -> true
      end)
  end

let is_flat_idc_1 params =
  match params.ss.ss_fetch_type with
  | Fetch_Atomic -> true
  | Fetch_Relaxed p ->
      match p.flat_need_dc with
      | false -> true
      | true -> false
      end
  end

let is_flat_dic_1 params =
  match params.ss.ss_fetch_type with
  | Fetch_Atomic -> true
  | Fetch_Relaxed p ->
      match p.flat_need_ic with
      | false -> true
      | true -> false
      end
  end

let update_model_params_flat_idc params b =
  <| params with ss = update_ss_params_flat_idc params.ss b |>

let update_model_params_flat_dic params b =
  <| params with ss = update_ss_params_flat_dic params.ss b |>

let is_fetch_sequential params = match params.thread_fetch_order with
  | Fetch_Sequential -> true
  | _ -> false
  end

let is_fetch_relaxed params = match params.ss_fetch_type with
  | Fetch_Relaxed _ -> true
  | _ -> false
  end

let is_fetch_atomic params = match params.ss_fetch_type with
  | Fetch_Atomic -> true
  | _ -> false
  end

let is_pop_not_flat_model params = match params.thread_model with
  | POP_thread_model Standard_POP -> true
  | _ -> false
end

let is_flat_model params = match params.thread_model with
  | POP_thread_model Flat_POP -> true
  | _ -> false
end


type eager_mode =
  <|
    eager_fetch_single:        bool;
    eager_fetch_multi:         bool;
    eager_pseudocode_internal: bool;
    eager_constant_reg_read:   bool;
    eager_reg_rw:              bool;
    eager_memory_aux:          bool;
    eager_finish:              bool;
    eager_fp_recalc:           bool;
    eager_thread_start:        bool;

    eager_fetch_unmodified:    bool;
    eager_local_mem:           bool;
    em_shared_memory:          set footprint;
  |>




type initial_state_record 'i =
  <|  isr_isa:               isa 'i;
      isr_params:            model_params;
      (* TODO: remove isr_program *)
      isr_program:           instruction_semantics 'i -> address -> fetch_and_decode_outcome 'i;
      isr_return_addr:       list (thread_id * address);
      isr_thread_ids:        list thread_id;
      isr_register_data:     thread_id -> list (reg_base_name * register_value);
      isr_register_values:   registerdata -> thread_id -> reg_base_name -> register_value;
      isr_first_instruction: thread_id -> maybe address;
      isr_memory:            list write;
  |>

let branch_targets_from_list
    (bts: list (thread_id * list (address * list address)))
    : branch_targets_map
  =
  let thread_bts tbts =
    [(addr, Set.fromList addrs) | forall ((addr, addrs) MEM tbts) | true]
    $> Map.fromList
  in
  [(tid, thread_bts tbts) | forall ((tid, tbts) MEM bts) | true]
  $> Map.fromList

let branch_targets_to_list
    (bts: branch_targets_map)
    : list (thread_id * list (address * list address))
  =
  Map.map (Map.map Set_extra.toList) bts
  $> Map.map Map_extra.toList
  $> Map_extra.toList

(* Map.mapi is not defined for HOL4, so this has been switched to the
 * mapi defined in utils.lem *)
let union_and_diff_branch_targets
    (branch_targets_lhs: branch_targets_map)
    (branch_targets_rhs: branch_targets_map)
    : branch_targets_map * list (thread_id * list (address * list address))
  =
  let diff =
    mapi
      (fun tid tbts_lhs ->
        let tbts_rhs = Map.findWithDefault tid Map.empty branch_targets_rhs in
        mapi
          (fun addr addrs_lhs ->
            Map.findWithDefault addr {} tbts_rhs
            $> Set.difference addrs_lhs
          )
          tbts_lhs
      )
      branch_targets_lhs
    $> branch_targets_to_list
    $> List.map (fun (tid, tbts) -> (tid, List.filter (function (_, []) -> false | _ -> true end) tbts))
    $> List.filter (function (_, []) -> false | _ -> true end)
  in

  let aunion =
    List.foldl
      (fun branch_targets (tid, tbts_diff) ->
        let tbts =
          List.foldl
            (fun tbts (addr, addrs_diff) ->
              let addrs =
                (Set.fromList addrs_diff)
                union
                (Map.findWithDefault addr {} tbts)
              in
              Map.insert addr addrs tbts
            )
            (Map.findWithDefault tid Map.empty branch_targets)
            tbts_diff
        in
        Map.insert tid tbts branch_targets
      )
      branch_targets_rhs
      diff
  in

  (aunion, diff)


let union_and_diff_shared_memory
    (fps_lhs: set footprint)
    (fps_rhs: set footprint)
    : set footprint * set footprint (* (union, diff) *)
  =
  let merged_fps_rhs = Fragments.merge_footprints true fps_rhs in
  let diff =
    {fp_lhs | forall (fp_lhs IN fps_lhs)
            | forall (fp_rhs IN merged_fps_rhs).
                not (Fragments.sub_footprint fp_lhs fp_rhs)}
  in
  (fps_rhs union diff $> Fragments.merge_footprints false, diff)



(** Default parameters *)

let default_model_params =
  let default_ss =
    <|  ss_model = PLDI11_storage_model;
        ss_sc = false;
        new_coh =  Use_old_coherence ;
        flowing_topology = FTopo_leaf 0;
        ss_fetch_type = Fetch_Atomic;
    |>
  in

  let default_t =
    <|  thread_model                   = PLDI11_thread_model;
        thread_restriction             = RestrictionNone;
        thread_allow_tree_speculation  = true;
        thread_allow_write_subsumption = false;
        thread_fail_on_loop            = false;
        thread_loop_unroll_limit       = Nothing;
        thread_fetch_limit             = Nothing;
        thread_fetch_from_ss           = false;
        thread_fetch_order             = Fetch_Sequential;

        p_promise_first                = false;
        p_par_pts_search               = false;
        p_par_pts_search_follow_trace  = true;
        p_fuel                         = Nothing;

        branch_targets                 = Map.empty;
        thread_modified_code_footprints      = Set.empty;
    |>
  in

  <|  ss             = default_ss;
      t              = default_t;
      shared_memory  = Nothing;
  |>
